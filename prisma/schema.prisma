// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id        String                @id @default(uuid())
  name      String                @unique @db.VarChar(255)
  slug      String
  details   Organization_details? @relation(fields: [detailsId], references: [id])
  detailsId String?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  plan      Plan                  @relation(fields: [planId], references: [id])
  planId    Int                   @default(1)

  // published Boolean @default(false)
  // author    User    @relation(fields: [authorId], references: [id])
  // authorId  Int
  UsersOnOrganizations UsersOnOrganizations[]
}

model Organization_details {
  id                      String        @id @default(uuid())
  organization            Organization?
  organizationId          String
  billing_address_line_1  String?       @db.VarChar(255)
  billing_address_line_2  String?       @db.VarChar(255)
  billind_address_city    String?       @db.VarChar(255)
  billing_address_country String?       @db.VarChar(100)
  billing_address_zipcode String?       @db.VarChar(100)
  vat_id                  String?       @db.VarChar(255)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model User {
  id                   String                 @id @default(uuid())
  first_name           String?
  last_name            String?
  email                String                 @unique @db.VarChar(255)
  password             String                 @db.VarChar(255)
  phone_number         String?                @db.VarChar(255)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  UsersOnOrganizations UsersOnOrganizations[]
}

model UsersOnOrganizations {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  assignedAt     DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@id([organizationId, userId])
}

model Feature {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  FeaturesOnPlans FeaturesOnPlans[]
}

model Plan {
  id               Int       @id @default(autoincrement())
  name             String
  description      String
  createdAt        DateTime  @default(now())
  discontinued     Boolean   @default(false)
  discontinuedAt   DateTime?
  updatedAt        DateTime  @updatedAt
  expires          Boolean   @default(false)
  length_days      Int?
  yearly_cost_USD  Int       @default(0)
  yearly_cost_EURO Int       @default(0)

  organization Organization[]

  FeaturesOnPlans FeaturesOnPlans[]
}

model FeaturesOnPlans {
  feature    Feature  @relation(fields: [featureId], references: [id])
  featureId  Int
  plan       Plan     @relation(fields: [planId], references: [id])
  planId     Int
  assignedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([planId, featureId])
}
